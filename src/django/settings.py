"""
Django settings for fks_project.

Generated by 'django-admin startproject' using Django 5.2.7

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# django is at src/web/django, so we need to go up 3 levels to get to project root
BASE_DIR = Path(__file__).resolve().parent.parent.parent  # This is src/
PROJECT_ROOT = BASE_DIR.parent  # This is the project root


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    "DJANGO_SECRET_KEY", "django-insecure-dev-key-change-in-production"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True") == "True"

ALLOWED_HOSTS = os.getenv(
    "ALLOWED_HOSTS", "localhost,127.0.0.1,desktop-win,web,fkstrading.xyz,www.fkstrading.xyz"
).split(",")

# Proxy configuration for Nginx
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party apps
    "rest_framework",
    "rest_framework.authtoken",  # For token authentication
    "corsheaders",
    "django_celery_beat",
    "django_celery_results",
    "axes",  # django-axes for login attempt tracking and blocking
    # Local apps - using actual directory names from src/
    # Only include apps that are properly configured Django apps
    "authentication",  # ✅ Authentication system
    "core",
    "trading",
    "api",
    "web",
    "monitor",  # ✅ Service monitoring and health checks
    # 'config',  # Has import issues with loguru, skip for now
    # 'forecasting',
    # 'chatbot',
    # 'rag',
    # 'data',
    # 'infrastructure',
    # 'services',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Security middleware - django-axes for login attempt tracking
    "axes.middleware.AxesMiddleware",
    # Custom authentication middleware
    "authentication.middleware.APIKeyAuthenticationMiddleware",
    "authentication.middleware.SessionTrackingMiddleware",
    "authentication.middleware.RateLimitMiddleware",
    "authentication.middleware.UserStateMiddleware",
]

ROOT_URLCONF = "web.django.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "web.django.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB", "trading_db"),
        "USER": os.getenv("POSTGRES_USER", "postgres"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD", "postgres"),
        "HOST": os.getenv("POSTGRES_HOST", "db"),
        "PORT": os.getenv("POSTGRES_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = (
    [
        BASE_DIR / "static",
    ]
    if (BASE_DIR / "static").exists()
    else []
)

# Media files
MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CORS settings
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Only in development
CORS_ALLOWED_ORIGINS = os.getenv("CORS_ORIGINS", "http://localhost:3000").split(",")

# Authentication settings
AUTH_USER_MODEL = "authentication.User"  # Use custom user model
LOGIN_URL = "/auth/login/"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

# REST Framework settings
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 100,
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "100/hour",
        "user": "1000/hour",
    },
}

# Celery Configuration
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://redis:6379/0")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", "redis://redis:6379/0")
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE

# Redis Cache
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": os.getenv("REDIS_URL", "redis://redis:6379/1"),
    }
}

# Session settings - Redis-backed sessions
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"
SESSION_COOKIE_NAME = "fks_sessionid"
SESSION_COOKIE_AGE = int(os.getenv("SESSION_COOKIE_AGE", 604800))  # 7 days default
SESSION_COOKIE_SECURE = os.getenv("SESSION_COOKIE_SECURE", "False") == "True"
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = "Lax"
SESSION_SAVE_EVERY_REQUEST = True  # Update session on every request

# CSRF settings
CSRF_COOKIE_SECURE = SESSION_COOKIE_SECURE
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = "Lax"
CSRF_TRUSTED_ORIGINS = [
    "https://fkstrading.xyz",
    "https://www.fkstrading.xyz",
]

# AI API Keys
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "")

# Trading settings
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY", "")
BINANCE_API_SECRET = os.getenv("BINANCE_API_SECRET", "")

# Discord webhook
DISCORD_WEBHOOK_URL = os.getenv("DISCORD_WEBHOOK_URL", "")

# ML Model storage
ML_MODELS_DIR = PROJECT_ROOT / "ml_models"
ML_MODELS_DIR.mkdir(exist_ok=True)

# Logging
# Determine if we're in test mode
TESTING = os.getenv("TESTING", "false").lower() == "true"

# Configure handlers based on environment
handlers_config = {
    "console": {
        "class": "logging.StreamHandler",
        "formatter": "verbose",
    },
}

# Only add file handler if not testing and log directory exists
if not TESTING:
    log_dir = Path("/app/logs")
    if log_dir.exists() or os.getenv("CREATE_LOG_DIR", "false").lower() == "true":
        try:
            log_dir.mkdir(parents=True, exist_ok=True)
            handlers_config["file"] = {
                "class": "logging.FileHandler",
                "filename": "/app/logs/django.log",
                "formatter": "verbose",
            }
        except (OSError, PermissionError):
            # If we can't create log directory, just use console
            pass

# Determine which handlers to use
default_handlers = ["console", "file"] if "file" in handlers_config else ["console"]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
    },
    "handlers": handlers_config,
    "loggers": {
        "django": {
            "handlers": default_handlers,
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
        },
        "trading": {
            "handlers": default_handlers,
            "level": "DEBUG",
        },
        "celery": {
            "handlers": default_handlers,
            "level": "INFO",
        },
    },
}

# ============================================================================
# SECURITY HARDENING
# ============================================================================

# django-axes configuration - Login attempt tracking and blocking
# https://django-axes.readthedocs.io/
AUTHENTICATION_BACKENDS = [
    # AxesStandaloneBackend should be the first backend in the AUTHENTICATION_BACKENDS list
    "axes.backends.AxesStandaloneBackend",
    # Django ModelBackend is the default authentication backend
    "django.contrib.auth.backends.ModelBackend",
]

# Axes Configuration
AXES_FAILURE_LIMIT = 5  # Number of failed login attempts before lockout
AXES_COOLOFF_TIME = 1  # Hours to wait before allowing login attempts again
AXES_LOCK_OUT_AT_FAILURE = True  # Lock out after failure limit reached
AXES_ONLY_USER_FAILURES = True  # Track failures per username, not IP (more secure)
AXES_LOCKOUT_TEMPLATE = None  # Use default lockout page
AXES_LOCKOUT_URL = None  # Redirect to this URL on lockout (None = 403 page)
AXES_RESET_ON_SUCCESS = True  # Reset failure count on successful login
AXES_VERBOSE = True  # Log lockout attempts
AXES_ENABLED = True  # Enable axes protection
AXES_FAILURE_LIMIT_FOR_IP = 10  # Separate IP-based limit (more permissive)
AXES_LOCK_OUT_BY_COMBINATION_USER_AND_IP = False  # Lock by username only

# django-ratelimit configuration for API endpoints
# Applied via decorator: @ratelimit(key='ip', rate='100/h', method='ALL')
RATELIMIT_ENABLE = True  # Enable rate limiting
RATELIMIT_USE_CACHE = "default"  # Use Redis cache for rate limit storage
RATELIMIT_VIEW = "web.views.ratelimited"  # Custom view for rate limit errors

# Security Headers (nginx should also set these, but Django can add them too)
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "SAMEORIGIN"

# HTTPS/SSL Settings (enable in production)
# SECURE_SSL_REDIRECT = True  # Redirect HTTP to HTTPS (nginx handles this)
# SESSION_COOKIE_SECURE = True  # Already set above based on env var
# CSRF_COOKIE_SECURE = True  # Already set above based on SESSION_COOKIE_SECURE

# Additional security settings
SECURE_HSTS_SECONDS = 31536000  # 1 year - Enable HSTS
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
